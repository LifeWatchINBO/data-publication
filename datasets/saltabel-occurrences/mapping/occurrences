USE [NBNData_IPT]
GO

/****** Object:  View [ipt].[vwGBIF_Saltabel]    Script Date: 03/08/2016 16:58:58 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




ALTER VIEW [ipt].[vwGBIF_Saltabel] 
AS
SELECT --S.ITEM_NAME as SurveyName

	/* Category: Record */
	  [occurrenceID] = 'INBO:NBN:' + TAO.TAXON_OCCURRENCE_KEY
	, [type] =
		CASE
			WHEN RT.SHORT_NAME IN ('auditory record', 'reference/auditory record' ) THEN 'Sound'
			WHEN RT.SHORT_NAME IN ('field record/photographed', '') THEN 'StillImage'
			WHEN RT.SHORT_NAME IN ('Collection/auditory record', 'Collection', 'Collection/field record', 'Collection/reference') THEN 'PhysicalObject'
			WHEN RT.SHORT_NAME IN ('Reference') THEN 'Text'
			WHEN RT.SHORT_NAME IN ('field record', 'None', 'reported to recorder', 'trapped in Malaise trap' ) THEN 'Event'
			ELSE ''
		END
	, [language] = 'en'
    , [license] = 'http://creativecommons.org/publicdomain/zero/1.0/'
    , [rightsHolder] = 'INBO'
    , [accessRights] = 'http://www.inbo.be/en/norms-for-data-use'
	, [datasetID] = 'http://doi.org/10.15468/1rcpsq'
	, [institutionCode] = 'INBO'
	, [collectionCode] =
		CASE
			WHEN RT.SHORT_NAME IN ('Collection/auditory record', 'Collection', 'Collection/field record', 'Collection/reference') THEN COALESCE(LTRIM(RTRIM(TAOC.[Collection])),'')
			ELSE ''
		END
	, [datasetName] = 'Saltabel - Orthoptera in Belgium'
	, [ownerInstitutionCode] = 'INBO'
	, [basisOfRecord] =
		CASE
			WHEN RT.SHORT_NAME IN ('Collection/auditory record', 'Collection', 'Collection/field record', 'Collection/reference') THEN 'PreservedSpecimen'
			ELSE 'HumanObservation'
		END
		
	/* Category: Occurence */
	, [recordedBy] =
		CASE
			WHEN inbo.[ufn_RecordersPerSample](SA.[SAMPLE_KEY], ' | ') = 'Unknown' THEN '' 
			ELSE inbo.[ufn_RecordersPerSample](SA.[SAMPLE_KEY], ' | ')
		END
	, [individualCount] = Coalesce(Meas.[individualCount], 1 ) -- if value is not present, 1 by default - confirmed by Tim Adriaens	
	, [organismQuantity] = Coalesce([organismQuantity], '')
	, [organismQuantityType] = CASE
								 WHEN [organismQuantity] <> '' THEN 'abundance'
								 ELSE ''
							   END	 
	, [sex] = Coalesce(Meas.[sex], '') -- TO CHECK by JO: always same sequence
	, [lifeStage] = Coalesce(Meas.[lifeStage], '')
	, [behavior] = Coalesce(Meas.[behavior], '')
	, [occurrenceRemarks] = Coalesce(Meas.[occurrenceRemarks], '')
	
	/* Category: Event */
	, [eventID] = SE.SURVEY_EVENT_KEY
	, [eventDate] = 
		CASE 
			WHEN [inbo].[LCReturnVagueDateGBIF](SA.VAGUE_DATE_START, SA.VAGUE_DATE_END, SA.VAGUE_DATE_TYPE, 1) = 'Unknown' THEN ''
			ELSE [inbo].[LCReturnVagueDateGBIF](SA.VAGUE_DATE_START, SA.VAGUE_DATE_END, SA.VAGUE_DATE_TYPE, 1)
		END			
	, [verbatimEventDate] = -- Only contains ranges
		CASE -- not really efficient, twice running function and than compare... should be in function itself: OF MSS OP LENGTE VAN HET TYPE!
			WHEN [inbo].[LCReturnVagueDateGBIF](SA.VAGUE_DATE_START, SA.VAGUE_DATE_END, SA.VAGUE_DATE_TYPE, 1) = 
				[inbo].[LCReturnVagueDateGBIF](SA.VAGUE_DATE_START, SA.VAGUE_DATE_END, SA.VAGUE_DATE_TYPE, 0) 
			THEN ''
			ELSE [inbo].[LCReturnVagueDateGBIF](SA.VAGUE_DATE_START, SA.VAGUE_DATE_END, SA.VAGUE_DATE_TYPE, 0)
		END
	, [continent] = 'Europe'
	, [countryCode] = 'BE'
	, stateProvince =  -- Provinces currently only for XY-coordinates; by municipality-info could be improved
		CASE
			WHEN SA.SPATIAL_REF_QUALIFIER = 'XY from original rec' THEN COALESCE(shpProv.Province, N'')
            ELSE ''
		END	
	, [municipality] = CONVERT(Nvarchar(500), LN.ITEM_NAME)
	, [verbatimCoordinates] =  -- UTM code als hok, lege string als XYcoord (!remark: for UTM only flanders codes available)
		CASE
			WHEN SA.SPATIAL_REF_QUALIFIER = 'XY from original rec' THEN ''
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Centroïd UTM 1 km' THEN COALESCE('31U' + shp1.TAG, '')
            ELSE COALESCE('31U' + shp5.TAG, '')
		END
	, [verbatimLatitude] = 
		CASE
			WHEN SA.SPATIAL_REF_QUALIFIER = 'XY from original rec' THEN CONVERT(Nvarchar(20), CONVERT( DECIMAL( 12, 0), LEFT( SA.SPATIAL_REF, Charindex(  ',', SA.SPATIAL_REF, 1) - 1)))
            ELSE ''
		END	
	, [verbatimLongitude] =
		CASE
			WHEN SA.SPATIAL_REF_QUALIFIER = 'XY from original rec' THEN CONVERT(Nvarchar(20),CONVERT( DECIMAL( 12, 0), Substring( SA.SPATIAL_REF, Charindex(  ',', SA.SPATIAL_REF, 1) + 1, LEN( SA.SPATIAL_REF))))
            ELSE ''
		END		
	, [verbatimCoordinateSystem] = 
		CASE
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Centrd UTM5 x dgmnte' THEN 'UTM 5km'
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Centroïd deelgemnte' THEN 'UTM 5km'
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Centroïd UTM 5 km' THEN 'UTM 5km'
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Imported' THEN 'UTM 5km' -- These are also UTM5
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Centroïd UTM 1 km' THEN 
																	CASE
																		WHEN shp1.TAG IS NOT NULL THEN 'UTM 1km'
																		ELSE ''
																	END
			WHEN SA.SPATIAL_REF_QUALIFIER = 'XY from original rec' THEN 'Belgium Lambert 72'
            ELSE ''
		END	
	, [verbatimSRS] =   -- all are BD72 listed, this has been checked
		CASE
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Centrd UTM5 x dgmnte' THEN 'ED50'  -- ED50 of toch ook Lambert? VRAGEN JO!
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Centroïd deelgemnte' THEN 'ED50'
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Centroïd UTM 5 km' THEN 'ED50'
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Imported' THEN 'ED50' -- These are also UTM5
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Centroïd UTM 1 km' THEN 
																	CASE
																		WHEN shp1.TAG IS NOT NULL THEN 'ED50'
																		ELSE ''
																	END
			WHEN SA.SPATIAL_REF_QUALIFIER = 'XY from original rec' THEN 'Belgian Datum 1972'
            ELSE ''
		END	
	, [decimalLatitude] = CONVERT(Nvarchar(20),CONVERT(decimal(12,5),ROUND(COALESCE(SA.Lat,0),5)))
	, [decimalLongitude] = CONVERT(Nvarchar(20),CONVERT(decimal(12,5),ROUND(COALESCE(SA.Long,0),5)))
	, [geodeticDatum] = 'WGS84'
	, [coordinateUncertaintyInMeters] =
		CASE
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Centrd UTM5 x dgmnte' THEN '3536'
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Centroïd deelgemnte' THEN '3536'
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Centroïd UTM 5 km' THEN '3536'
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Imported' THEN '3536' -- These are also UTM5
			WHEN SA.SPATIAL_REF_QUALIFIER = 'Centroïd UTM 1 km' THEN '707'
			WHEN SA.SPATIAL_REF_QUALIFIER = 'XY from original rec' THEN '30'
            ELSE ''
		END
	, [identifiedBy] = COALESCE(
								CASE
									WHEN LTRIM(RTRIM(COALESCE (RTRIM(LTRIM(I.[FORENAME])), RTRIM(LTRIM(I.[INITIALS])), '') + ' ' + COALESCE (RTRIM(LTRIM(I.[SURNAME])), ''))) = 'Unknown' THEN NULL
									ELSE LTRIM(RTRIM(COALESCE (RTRIM(LTRIM(I.[FORENAME])), RTRIM(LTRIM(I.[INITIALS])) ,'') + ' ' + COALESCE (RTRIM(LTRIM(I.[SURNAME])), ''))) 
								END
								, '')
	, [scientificName] = ns.RECOMMENDED_SCIENTIFIC_NAME
	, [kingdom]	= 'Animalia'
	, [phylum] = 'Arthropoda'
	, [class] = 'Insecta'
	, [order] = 'Orthoptera'
	, [taxonRank] = LOWER(NS.RECOMMENDED_NAME_RANK_LONG)
	, [scientificNameAuthorship] = NS.RECOMMENDED_NAME_AUTHORITY + ISNULL (' ' + NS.RECOMMENDED_NAME_QUALIFIER , '')
	, [vernacularName] = NormNaam.ITEM_NAME
	, [nomenclaturalCode] = 'ICZN'	 
	    
FROM dbo.Survey S
	INNER JOIN [dbo].[Survey_event] SE ON SE.[Survey_Key] = S.[Survey_Key]
	LEFT JOIN [dbo].[Location] L ON L.[Location_Key] = SE.[Location_key]
	LEFT JOIN [dbo].[Location_Name] LN ON LN.[Location_Key] = L.[Location_Key] 
	
	INNER JOIN (SELECT * --covering for problems in WHERE is not useful due to optimization plans of SQL; so conditions are covered here
					, CASE 
						WHEN SA1.[SPATIAL_REF_SYSTEM] = 'BD72' 
						THEN CONVERT(DECIMAL (12,3), LEFT (SA1.SPATIAL_REF , CHARINDEX (',', SA1.SPATIAL_REF, 1)-1)) 
						ELSE 0 -- WARNING! using zero here, because spatial join with belgian-coordinates and spatial layers ONLY; otherwise not valid
					  END as LambertX
					, CASE 
						WHEN SA1.[SPATIAL_REF_SYSTEM] = 'BD72' 
						THEN CONVERT(DECIMAL (12,3), SUBSTRING (SA1.SPATIAL_REF , CHARINDEX (',', SA1.SPATIAL_REF, 1 )+1 , LEN(SA1.SPATIAL_REF))) 
						ELSE 0 -- WARNING! using zero here, because spatial join with belgian-coordinates and spatial layers ONLY; otherwise not valid
					  END as LambertY	
				FROM [dbo].[SAMPLE] SA1  
				WHERE 1=1
					AND LEN(SA1.[SPATIAL_REF]) > 1
					AND SA1.[SPATIAL_REF] IS NOT NULL
					AND SUBSTRING(SA1.SPATIAL_REF, CHARINDEX(',', SA1.SPATIAL_REF, 1)+1 , LEN(SA1.SPATIAL_REF)) IS NOT NULL
					--AND SA1.[SAMPLE_KEY] <> 'BFN0017900002ELC'  --(this was the problemmaker-itself; trying to make it more general)
				) SA ON  SE.[Survey_EVENT_Key] = SA.[Survey_EVENT_Key]
				
	LEFT JOIN [dbo].[SAMPLE_TYPE] ST ON  ST.[SAMPLE_TYPE_KEY] = SA.[SAMPLE_TYPE_KEY] 

	INNER JOIN [dbo].[TAXON_OCCURRENCE] TAO ON TAO.[SAMPLE_KEY] = SA.[SAMPLE_KEY]
	INNER JOIN [dbo].[TAXON_DETERMINATION] TD ON TD.TAXON_OCCURRENCE_KEY = TAO.TAXON_OCCURRENCE_KEY
	LEFT JOIN [dbo].[INDIVIDUAL] I ON I.[NAME_KEY] = TD.[DETERMINER]

	INNER JOIN dbo.TAXON_LIST_ITEM tlitd ON tlitd.TAXON_LIST_ITEM_KEY = TD.TAXON_LIST_ITEM_KEY
	INNER JOIN inbo.NAMESERVER_12 NS ON NS.INBO_TAXON_VERSION_KEY = tlitd.TAXON_VERSION_KEY
	INNER JOIN [dbo].[TAXON_RANK] TR ON TR.TAXON_RANK_KEY = tlitd.TAXON_RANK_KEY
	INNER JOIN dbo.NAMESERVER NSR ON NSR.INPUT_TAXON_VERSION_KEY = tlitd.TAXON_VERSION_KEY

	--Normalizing to Vernacular names
	LEFT OUTER JOIN (	SELECT TVen.*
							, ROW_NUMBER() OVER (PARTITION by NS.INPUT_TAXON_VERSION_KEY ORDER BY Tven.ITEM_NAME) as Nbr
							, NS.INPUT_TAXON_VERSION_KEY AS [INBO_TAXON_VERSION_KEY]
						FROM [dbo].[NameServer] NS
							 INNER JOIN dbo.TAXON_LIST_ITEM TLIVen ON TLIVen.PREFERRED_NAME = NS.RECOMMENDED_TAXON_LIST_ITEM_KEY
							 INNER JOIN dbo.TAXON_VERSION TVVen ON TVVen.TAXON_VERSION_KEY = TLIVen.TAXON_VERSION_KEY
							 INNER JOIN dbo.TAXON TVen ON TVVen.TAXON_KEY = TVen.TAXON_KEY
						WHERE TVen.[LANGUAGE] = 'nl'
					) NormNaam on NormNaam.[INBO_TAXON_VERSION_KEY] = tlitd.[TAXON_VERSION_KEY] AND NormNaam.Nbr = 1

	LEFT JOIN [dbo].[DETERMINATION_TYPE] DT ON DT.[DETERMINATION_TYPE_KEY] = TD.[DETERMINATION_TYPE_KEY]
	LEFT JOIN [dbo].[RECORD_TYPE] RT ON RT.[RECORD_TYPE_KEY] = TAO.[RECORD_TYPE_KEY]

	------ Getting the provinces for cases when XY-data (others are grid-dependent, leading to errors; manual entries not in NBNdata)
	LEFT OUTER JOIN shp.provinciebel shpProv ON
		shpProv.geom.STContains(geometry::Point(SA.LambertX, SA.LambertY, 0)) = 1 
			AND SA.SPATIAL_REF IS NOT NULL 		
			AND SA.SPATIAL_REF_QUALIFIER = 'XY from original rec'
			AND SA.LambertX <> 0 AND SA.LambertY <> 0
	
	------ Getting the grid codes UTM5
	LEFT OUTER JOIN [shp].[utm5_bel] shp5 ON
		shp5.geom.STContains(geometry::Point(SA.LambertX, SA.LambertY, 0)) = 1 
			AND SA.SPATIAL_REF IS NOT NULL 
			AND SA.SPATIAL_REF_QUALIFIER NOT IN ('Centroïd UTM 1 km', 'XY from original rec')
			AND SA.LambertX <> 0 AND SA.LambertY <> 0

	-------- Getting the grid codes UTM1
	LEFT OUTER JOIN [shp].Locatie_utm1_vl shp1 ON 
		shp1.UTM1_vl.STContains(geometry::Point(SA.LambertX, SA.LambertY, 0) )= 1 
			AND SA.SPATIAL_REF IS NOT NULL 
			AND SA.SPATIAL_REF_QUALIFIER = 'Centroïd UTM 1 km'	
			AND SA.LambertX <> 0 AND SA.LambertY <> 0
		
	LEFT OUTER JOIN ( SELECT tmp.TAXON_OCCURRENCE_KEY
						, dbo.Concatenate(1, Qualifier, ';' ) as ConQualifier
						, [sex] =
							dbo.Concatenate(1,
								CASE 
									WHEN unit = 'Count' THEN
										CASE 
											WHEN Qualifier IN ('Adult Man', 'Man') THEN 'male'  
											WHEN Qualifier IN ('Adult Vrouw', 'Vrouw') THEN 'female' 
											--ELSE ''
										END
									ELSE NULL 
								END, ' | ')
						, [lifeStage] =
							dbo.Concatenate(1,
								CASE
									WHEN unit = 'Count' THEN
										CASE 
											WHEN Qualifier IN ('Nimf', 'juviniel', 'juveniel') THEN 'juvenile'
											WHEN Qualifier IN ('Adult Man', 'Man', 'Adult Vrouw', 'Vrouw') THEN 'adult'
											ELSE NULL
										END
									ELSE NULL 
								END, ' | ')
						, [behavior] = dbo.Concatenate(1,
								CASE 
									WHEN Qualifier IN ('Zangpost') THEN N'stridulation post'
									ELSE NULL
								END , ' | ')
						, [occurrenceRemarks] = CASE WHEN MAX(Qualifier) IN  ('None', 'w.be;None', 'w.be', 'None;w.be' ) THEN '' 
													ELSE N'{' + dbo.Concatenate(1,
																		CASE 
																			WHEN Qualifier IN (N'Nimf', N'juviniel', N'juveniel') THEN N'"juvenile"'
																			WHEN Qualifier IN ('Vrouw', 'Adult Vrouw') THEN '"female"' 
																			WHEN Qualifier IN ('Man', 'Adult Man') THEN '"male"' 
																			WHEN Qualifier IN (N'Zangpost') THEN N'"stridulation post"'
																			WHEN Qualifier IN (N'Vleugel') THEN N'"wing dimorphism"' 
																		END + N': ' + CASE 
																						WHEN Qualifier IN (N'Vleugel') AND tmp.DATA = N'brachypteer' THEN N'"brachypterous"'
																						WHEN Qualifier IN (N'Vleugel') AND tmp.DATA = N'macropteer'  THEN N'"macropterous"'
																						ELSE tmp.DATA 
																						END
																					, ', ') + N'}'
											END 
							, [individualCount] =
							SUM(
								CASE
									WHEN ISNUMERIC(tmp.DATA) = 1 AND unit = 'Count' THEN CONVERT(int, tmp.DATA)
									ELSE NULL
								END
							)
							, [organismQuantity] =  dbo.Concatenate(1,
															CASE 
																WHEN tmp.MeasurementType = 'Abundance' AND  tmp.unit = 'Personal Code' THEN 
																	CASE tmp.DATA 
																		WHEN 'schaars' THEN 'scarce'
																		WHEN 'talrijk' THEN 'numerous'
																		WHEN 'zeer talrijk' THEN 'abundant'
																		else ''
																	END
																ELSE NULL 
															END , ', ')
					FROM ( 
						SELECT taoMeas.TAXON_OCCURRENCE_KEY
							, MTMeas.SHORT_NAME as MeasurementType
							, MUMeas.SHORT_NAME as unit
							, taoMeas.DATA
							, taoMeas.ACCURACY
							, MQMeas.SHORT_NAME as Qualifier
						FROM dbo.TAXON_OCCURRENCE_DATA  taoMeas
							LEFT JOIN dbo.MEASUREMENT_UNIT MUMeas ON  MUMeas.MEASUREMENT_UNIT_KEY = taoMeas.MEASUREMENT_UNIT_KEY 
							LEFT JOIN dbo.MEASUREMENT_QUALIFIER MQMeas ON  MQMeas.MEASUREMENT_QUALIFIER_KEY = taoMeas.MEASUREMENT_QUALIFIER_KEY
							LEFT JOIN dbo.MEASUREMENT_TYPE MTMeas ON  MTMeas.MEASUREMENT_TYPE_KEY = MQMeas.MEASUREMENT_TYPE_KEY 
					) tmp
					GROUP BY tmp.TAXON_OCCURRENCE_KEY
					) Meas ON Meas.TAXON_OCCURRENCE_KEY = TAO.TAXON_OCCURRENCE_KEY
	
	LEFT OUTER JOIN (SELECT TAOC.TAXON_OCCURRENCE_KEY
							, RTRIM(LTRIM(spl.Value)) as [TrimmedComment]
							, Substring(RTRIM(LTRIM(spl.Value)), CHARINDEX(':', spl.Value, 1) + 1, LEN(spl.Value)) as [Collection]
					 FROM dbo.TAXON_OCCURRENCE TAOC
							OUTER APPLY [inbo].[udf_SplitString] (COALESCE(Case WHEN ( Left(Convert(Varchar(max), [TAOC].COMMENT),7) = '{\rtf1\') THEN dbo.ufn_RtfToPlaintext(CONVERT(Varchar(max), [TAOC].COMMENT))  
																									ELSE Convert(Varchar(max), [TAOC].COMMENT) 
																									END,'') , '||', 2000)  as spl
					 WHERE 1=1
							AND RTRIM(LTRIM(spl.Value)) <> ''
							AND LEFT(spl.Value, LEN('Collection')) = 'Collection'
					 ) TAOC ON TAOC.[TAXON_OCCURRENCE_KEY] = TAO.[TAXON_OCCURRENCE_KEY]

									
WHERE S.[ITEM_NAME] =  'Saltabel'
AND ISNUMERIC (SUBSTRING(LN.[ITEM_NAME],2,1)) = 0
-- Get the prefered Determination 
AND TD.[PREFERRED] = 1
AND NS.[RECOMMENDED_NAME_RANK] NOT IN ( 'FunGp','Agg','SppGrp' )
AND DT.[SHORT_NAME] NOT In ('Incorrect','Invalid','Considered Incorrect','Requires Confirmation')
AND TR.[SEQUENCE] >= 230 
AND LN.PREFERRED = 1
AND TAO.CONFIDENTIAL = 0




GO


